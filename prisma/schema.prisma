datasource db {
  provider = "postgresql" // or "sqlite", "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  firstname   String?
  lastname    String?
  password    String
  projects    Project[] // Relation to projects created by the user
  tasks       Task[] // Relation to tasks assigned to the user
  todos       Todo[] // Relation to user's todos
  comments    Comment[]
  createdAt   DateTime      @default(now())
  ProjectUser ProjectUser[]
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  color       String? // Customizable color for the project
  userId      Int // Foreign key to User
  user        User          @relation(fields: [userId], references: [id])
  tasks       Task[] // Relation to tasks within this project
  sections    Section[] // Relation to sections within this project
  sharedUsers ProjectUser[] // Relation for shared project users
  createdAt   DateTime      @default(now())
}

model Section {
  id        Int      @id @default(autoincrement())
  name      String
  projectId Int // Foreign key to Project
  project   Project  @relation(fields: [projectId], references: [id])
  tasks     Task[] // Tasks within the section
  createdAt DateTime @default(now())
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime?
  priority    Priority   @default(MEDIUM)
  completed   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  projectId   Int?
  project     Project?   @relation(fields: [projectId], references: [id])
  sectionId   Int?
  section     Section?   @relation(fields: [sectionId], references: [id])
  labels      Label[]    @relation("TaskLabels") // No `references` needed for implicit many-to-many
  reminders   Reminder[]
  comments    Comment[]
  todos       Todo[] // Relation to todos (subtasks) under this task
}

model Todo {
  id        Int       @id @default(autoincrement())
  title     String
  completed Boolean   @default(false)
  dueDate   DateTime?
  createdAt DateTime  @default(now())
  taskId    Int // Foreign key to Task
  task      Task      @relation(fields: [taskId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
}

model Label {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  color String?
  tasks Task[]  @relation("TaskLabels") // No `references` needed for implicit many-to-many
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id]) // Relationship with User
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id]) // Relationship with Task
}

model Reminder {
  id       Int      @id @default(autoincrement())
  remindAt DateTime
  taskId   Int // Foreign key to Task
  task     Task     @relation(fields: [taskId], references: [id])
}

model ProjectUser {
  id        Int     @id @default(autoincrement())
  projectId Int // Foreign key to Project
  project   Project @relation(fields: [projectId], references: [id])
  userId    Int // Foreign key to User
  user      User    @relation(fields: [userId], references: [id])
  role      Role // Role of the user in the project
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Role {
  OWNER
  MEMBER
}
