datasource db {
  provider = "postgresql" // or "sqlite", "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  firstname        String?
  lastname         String?
  password         String
  projects         Project[] // Relation to projects created by the user
  tasks            Task[] // Relation to tasks assigned to the user
  todos            Todo[] // Relation to user's todos
  comments         Comment[]
  createdAt        DateTime           @default(now())
  ProjectUser      ProjectUser[]
  OrderTaskListing OrderTaskListing[]
}

model Project {
  id          String        @id @default(uuid()) // Changed to UUID
  name        String
  description String?
  color       String? // Customizable color for the project
  userId      String // Foreign key to User (adjusted to UUID)
  user        User          @relation(fields: [userId], references: [id])
  tasks       Task[] // Relation to tasks within this project
  sharedUsers ProjectUser[] // Relation for shared project users
  createdAt   DateTime      @default(now())
}



model Task {
  id          String     @id @default(uuid()) // Changed to UUID 
  title       String
  description String?
  dueDate     DateTime?
  priority    Priority   @default(MEDIUM)
  completed   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String // Foreign key to User (adjusted to UUID)
  user        User       @relation(fields: [userId], references: [id])
  projectId   String? // Foreign key to Project (adjusted to UUID)
  project     Project?   @relation(fields: [projectId], references: [id])
  //labels      Label[]    @relation("TaskLabels") // No `references` needed for implicit many-to-many
  reminders   Reminder[]
  comments    Comment[]
  todos       Todo[] // Relation to todos (subtasks) under this task
}

model Todo {
  id        String    @id @default(uuid()) // Changed to UUID
  title     String
  completed Boolean   @default(false)
  dueDate   DateTime?
  createdAt DateTime  @default(now())
  taskId    String // Foreign key to Task (adjusted to UUID)
  task      Task      @relation(fields: [taskId], references: [id])
  userId    String // Foreign key to User (adjusted to UUID)
  user      User      @relation(fields: [userId], references: [id])
}

model Label {
  id    String  @id @default(uuid()) // Changed to UUID
  name  String  @unique
  color String?
  // tasks Task[]  @relation("TaskLabels") // No `references` needed for implicit many-to-many
}

model Comment {
  id        String   @id @default(uuid()) // Changed to UUID
  content   String
  createdAt DateTime @default(now())
  userId    String // Foreign key to User (adjusted to UUID)
  user      User     @relation(fields: [userId], references: [id]) // Relationship with User
  taskId    String // Foreign key to Task (adjusted to UUID)
  task      Task     @relation(fields: [taskId], references: [id]) // Relationship with Task
}

model Reminder {
  id       String   @id @default(uuid()) // Changed to UUID
  remindAt DateTime
  taskId   String // Foreign key to Task (adjusted to UUID)
  task     Task     @relation(fields: [taskId], references: [id])
}

model ProjectUser {
  id        String  @id @default(uuid()) // Changed to UUID
  projectId String // Foreign key to Project (adjusted to UUID)
  project   Project @relation(fields: [projectId], references: [id])    
  userId    String // Foreign key to User (adjusted to UUID)
  user      User    @relation(fields: [userId], references: [id])
  role      Role // Role of the user in the project
}

model OrderTaskListing {
  id     String   @id @default(uuid())
  userId String   @unique
  user   User     @relation(fields: [userId], references: [id])
  taskId String[]
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Role {
  OWNER
  MEMBER
}
